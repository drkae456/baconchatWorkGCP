name: Deploy to GCP

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    env:
      # Terraform variables passed via GitHub Secrets
      TF_VAR_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_REGION: ${{ secrets.GCP_REGION }}
      TF_VAR_GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET }}
      TF_VAR_VPC_NAME: ${{ secrets.VPC_NAME }}
      TF_VAR_SUBNET_NAME: ${{ secrets.SUBNET_NAME }}
      TF_VAR_CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
      TF_VAR_NODE_POOL_NAME: ${{ secrets.NODE_POOL_NAME }}
      TF_VAR_DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }}
      TF_VAR_IMAGE_NAME: ${{ secrets.IMAGE_NAME }}

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Authenticate Docker to GCR
      - name: Authenticate Docker to GCR
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | docker login -u _json_key --password-stdin https://gcr.io

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/baconchatportfolio:latest -f docker/WebApp/Dockerfile .

      # Push Docker image to GCR
      - name: Push Docker image to GCR
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/baconchatportfolio:latest

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.0'

      # Terraform Init
      - name: Terraform Init
        run: terraform init 

      # Check if resources exist
      - name: Check existing resources
        id: check_resources
        run: |
          # Check if GKE cluster exists
          if gcloud container clusters list --filter="name=${{ secrets.CLUSTER_NAME }}" --format="get(name)" | grep -q "^${{ secrets.CLUSTER_NAME }}$"; then
            echo "GKE cluster already exists"
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
          else
            echo "GKE cluster does not exist"
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
          fi

      # Terraform Plan
      - name: Terraform Plan
        id: plan
        if: steps.check_resources.outputs.cluster_exists == 'false'
        run: |
          terraform plan -detailed-exitcode -out=tfplan 2>&1 | tee plan.txt
        continue-on-error: true
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ secrets.GCP_REGION }}
          TF_VAR_image_name: "gcr.io/${{ secrets.GCP_PROJECT_ID }}/baconchatportfolio:latest"
          TF_VAR_gcp_credentials: ${{ secrets.GCP_SA_KEY }}

      # Check Terraform Plan Status
      - name: Check Terraform Plan Status
        id: check
        if: steps.check_resources.outputs.cluster_exists == 'false'
        run: |
          if [ "${{ steps.plan.outcome }}" = "success" ]; then
            echo "No changes required. Infrastructure is up to date."
            echo "skip_apply=true" >> $GITHUB_OUTPUT
          else
            echo "Changes detected. Will apply changes."
            echo "skip_apply=false" >> $GITHUB_OUTPUT
          fi

      # Terraform Apply (only if changes detected and resources don't exist)
      - name: Terraform Apply
        if: steps.check_resources.outputs.cluster_exists == 'false' && steps.check.outputs.skip_apply == 'false'
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ secrets.GCP_REGION }}
          TF_VAR_image_name: "gcr.io/${{ secrets.GCP_PROJECT_ID }}/baconchatportfolio:latest"
          TF_VAR_gcp_credentials: ${{ secrets.GCP_SA_KEY }}

      # Get GKE Credentials
      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.CLUSTER_NAME }}
          location: ${{ secrets.GCP_REGION }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Deploy application
      - name: Deploy to GKE
        run: |
          kubectl set image deployment/${{ secrets.DEPLOYMENT_NAME }} \
            ${{ secrets.DEPLOYMENT_NAME }}=gcr.io/${{ secrets.GCP_PROJECT_ID }}/baconchatportfolio:latest

          # Wait for the deployment to complete
          kubectl rollout status deployment/${{ secrets.DEPLOYMENT_NAME }}

      # Verify deployment
      - name: Verify deployment
        run: |
          kubectl get services -o wide
          kubectl get pods -o wide
